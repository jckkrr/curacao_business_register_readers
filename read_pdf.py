{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69a803c3-e2d8-41bb-9390-58544636eaff",
   "metadata": {},
   "outputs": [],
   "source": [
    "## A script that will convert a directory of saved PDFs from the Curacao business register (saved via print) into a dataframe, for a better understanding of hat is going on there.\n",
    "\n",
    "import fitz\n",
    "import os\n",
    "import pandas as pd\n",
    "import plotly.graph_objects as go\n",
    "import re\n",
    "import glob\n",
    "\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.max_rows', 500)\n",
    "\n",
    "### \n",
    "\n",
    "def csvDF(document):\n",
    "    \n",
    "    doc = fitz.open(document)\n",
    "\n",
    "    text = None\n",
    "    for page in doc:\n",
    "\n",
    "        if text == None:\n",
    "            text = page.get_text()  \n",
    "        else:\n",
    "            text += page.get_text()  \n",
    "            \n",
    "        pipe_text = text.replace('\\n','|')\n",
    "        \n",
    "    ######### \n",
    "    \n",
    "    def getCompanyInfo(pipe_text):\n",
    "        \n",
    "        d = {}\n",
    "        \n",
    "        company_area = re.search('(.*)Official\\(s\\)', pipe_text).group().replace('|', '\\n')        \n",
    "        \n",
    "        lines = [x.strip() for x in company_area.split('\\n')]\n",
    "\n",
    "        for ln in range(0, len(lines)):\n",
    "            line, prev_line = lines[ln], lines[ln-1]\n",
    "            if prev_line in ['Trade name', 'Legal form', 'Official name', 'Statutory seat', 'Date of incorporation', 'Date established', 'Nominal Capital', 'Fiscal year', 'Address', 'Country', 'Mailing address', 'Country', 'Description English']:                \n",
    "                d[prev_line] = line\n",
    "                                \n",
    "        return d\n",
    "\n",
    "    ############\n",
    "\n",
    "    def getOfficerInfo(pipe_text):\n",
    "        \n",
    "        df = pd.DataFrame()\n",
    "        \n",
    "        officer_area = re.search('Official\\(s\\).*', pipe_text).group()\n",
    "            \n",
    "        ns = [int(x.replace('|','')) for x in re.findall('\\|\\d\\|', officer_area)]\n",
    "        for n in ns:\n",
    "            \n",
    "            try:  \n",
    "                                 \n",
    "                if n != max(ns):\n",
    "                    n_area = re.search(f'\\|{n}\\|.*\\|{n+1}\\|', officer_area).group()\n",
    "                elif n==max(ns):\n",
    "                    n_area = re.search(f'\\|{n}\\|.*\\|Source', officer_area).group()\n",
    "                        \n",
    "                n_area = n_area.replace('|', '\\n')\n",
    "\n",
    "                lines = n_area.split('\\n')\n",
    "                lines = [x.strip() for x in lines]\n",
    "\n",
    "                for ln in range(0, len(lines)):\n",
    "\n",
    "                    line = lines[ln]\n",
    "                    prev_line = lines[ln-1]\n",
    "                    \n",
    "                    if prev_line in ['Function', 'Name', 'Date of birth', 'Place of birth', 'Nationality', 'Title description', 'Function', 'Title description', 'Registration number official']:\n",
    "\n",
    "                        df.loc[n, prev_line] = line\n",
    "                        \n",
    "            except:\n",
    "                pass\n",
    "            \n",
    "        return df\n",
    "            \n",
    "            \n",
    "    d = getCompanyInfo(pipe_text)\n",
    "    df = getOfficerInfo(pipe_text)\n",
    "    \n",
    "    for key in d.keys():\n",
    "        df[key] = d[key]\n",
    "\n",
    "    first_columns = ['Trade name']\n",
    "    columns = [x for x in first_columns if x in df.columns] + [x for x in df.columns if x not in first_columns]\n",
    "    df = df[columns]\n",
    "\n",
    "    return df\n",
    "\n",
    "####\n",
    "\n",
    "df = pd.DataFrame()\n",
    "\n",
    "files = glob.glob('CSVs/*')\n",
    "for file in files:\n",
    "    \n",
    "    try:\n",
    "        dfx = csvDF(file)\n",
    "    except:\n",
    "        dfx = pd.DataFrame()\n",
    "        print(file)\n",
    "        \n",
    "    df = pd.concat([df, dfx])\n",
    "    \n",
    "df = df.reset_index(drop=True)\n",
    "\n",
    "df.sample(3)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
